classdef MPIService
    % MPIService   A client to connect to the MPIService service
    %    SERVICE = MPIService  connects to http://localhost:8080/MPIClient/MPIClient and returns a SERVICE.
    %    
    %    To communicate with the service, call a function on the SERVICE:
    %
    %       [...] = FUNCTION(SERVICE,arg,...) 
    %
    %    See <a href="matlab:doc MPIService">doc MPIService</a> for a list of functions.
         
    % This file generated by matlab.wsdl.createWSDLClient at 13-Mar-2022 00:36:51
    % from http://localhost:8080/MPIClient/MPIClient?wsdl.  
    % Please do not alter this file.

    properties (SetAccess = immutable)
        Endpoint;  % service endpoint 
        WSDLFile;  % URI of WSDL
    end
    properties (Hidden)
        PortObj;   % the Java object implementing this client's methods
    end

    methods
        function obj = MPIService(wsdl)
            obj.WSDLFile = wsdl; 
            try
                wsdlService = mpiclient.MPIService();
                obj.PortObj = wsdlService.getMPIPort; 
                obj.Endpoint = char(wsdlService.getServiceName().toString);
            catch e
                if strcmp(e.identifier,'MATLAB:undefinedVarOrClass')
                    % if we couldn't find the service, see if expected jar is on classpath
                    dir = fileparts(mfilename('fullpath'));
                    % We expect this service's jar file to be in +wsdl subdirectory in 
                    % the same directory as this class file.
                    jpath = java.io.File(fullfile(dir, '+wsdl', 'mpiclient.jar')).getCanonicalFile;
                    cp = javaclasspath('-all');
                    if ~any(cellfun(@(x)jpath.equals(java.io.File(x).getCanonicalFile), cp))
                        thePath = char(jpath.toString);
                        error(message('MATLAB:webservices:AddClasspath', 'MPIService', thePath, thePath));
                    else
                        error(message('MATLAB:webservices:CannotFindClass', 'mpiclient.MPIService'));
                    end
                else
                    rethrow(e);
                end
            end
        end

        function xReturn = initialiseCentralMPI(obj)
        %initialiseCentralMPI  
        %  return = initialiseCentralMPI(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - logical or numeric scalar (XML boolean)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('initialiseCentralMPI',obj.PortObj);
            xReturn = toMATLAB(ret,'boolean',false);

        end

        function xReturn = setAllowedClientsList(obj,arg0)
        %setAllowedClientsList  
        %  return = setAllowedClientsList(obj,arg0)  
        %    Inputs:
        %      obj - MPIService object
        %      arg0 - string
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            if nargin < 2, arg0 = []; end
            ret = matlab.internal.callJava('setAllowedClientsList',obj.PortObj,fromMATLAB({'setAllowedClientsList','arg0'}, arg0,'string',true,false));
            xReturn = toMATLAB(ret,'int',false);

        end

        function xReturn = initialiseClientMPI(obj)
        %initialiseClientMPI  
        %  return = initialiseClientMPI(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - logical or numeric scalar (XML boolean)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('initialiseClientMPI',obj.PortObj);
            xReturn = toMATLAB(ret,'boolean',false);

        end

        function xReturn = readMasterMessage(obj)
        %readMasterMessage  
        %  return = readMasterMessage(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - string
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('readMasterMessage',obj.PortObj);
            xReturn = toMATLAB(ret,'string',false);

        end

        function xReturn = sendReplyToMaster(obj,arg0,arg1)
        %sendReplyToMaster  
        %  return = sendReplyToMaster(obj,arg0,arg1)  
        %    Inputs:
        %      obj - MPIService object
        %      arg0 - numeric scalar (XML int)
        %      arg1 - string
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            if nargin < 2, error(message('MATLAB:webservices:TooFewArgs', 'arg0')), end
            if isempty(arg0)
                error(message('MATLAB:webservices:EmptyArg', 'arg0'))
            end
            if nargin < 3, arg1 = []; end
            ret = matlab.internal.callJava('sendReplyToMaster',obj.PortObj,fromMATLAB({'sendReplyToMaster','arg0'}, arg0,'int',false,false),...
                fromMATLAB({'sendReplyToMaster','arg1'}, arg1,'string',true,false));
            xReturn = toMATLAB(ret,'int',false);

        end

        function xReturn = didAllClientsReply(obj,arg0)
        %didAllClientsReply  
        %  return = didAllClientsReply(obj,arg0)  
        %    Inputs:
        %      obj - MPIService object
        %      arg0 - numeric scalar (XML int)
        %    Output:
        %      return - logical or numeric scalar (XML boolean)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            if nargin < 2, error(message('MATLAB:webservices:TooFewArgs', 'arg0')), end
            if isempty(arg0)
                error(message('MATLAB:webservices:EmptyArg', 'arg0'))
            end
            ret = matlab.internal.callJava('didAllClientsReply',obj.PortObj,fromMATLAB({'didAllClientsReply','arg0'}, arg0,'int',false,false));
            xReturn = toMATLAB(ret,'boolean',false);

        end

        function xReturn = publishMessageToClients(obj,arg0,arg1)
        %publishMessageToClients  
        %  return = publishMessageToClients(obj,arg0,arg1)  
        %    Inputs:
        %      obj - MPIService object
        %      arg0 - string
        %      arg1 - numeric scalar (XML int)
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            if nargin < 3, error(message('MATLAB:webservices:TooFewArgs', 'arg1')), end
            if isempty(arg1)
                error(message('MATLAB:webservices:EmptyArg', 'arg1'))
            end
            ret = matlab.internal.callJava('publishMessageToClients',obj.PortObj,fromMATLAB({'publishMessageToClients','arg0'}, arg0,'string',true,false),...
                fromMATLAB({'publishMessageToClients','arg1'}, arg1,'int',false,false));
            xReturn = toMATLAB(ret,'int',false);

        end

        function xReturn = getNumberofCurrentClients(obj)
        %getNumberofCurrentClients  
        %  return = getNumberofCurrentClients(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('getNumberofCurrentClients',obj.PortObj);
            xReturn = toMATLAB(ret,'int',false);

        end

        function xReturn = initClientInfo(obj)
        %initClientInfo  
        %  return = initClientInfo(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('initClientInfo',obj.PortObj);
            xReturn = toMATLAB(ret,'int',false);

        end

        function xReturn = isMasterOn(obj)
        %isMasterOn  
        %  return = isMasterOn(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - logical or numeric scalar (XML boolean)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('isMasterOn',obj.PortObj);
            xReturn = toMATLAB(ret,'boolean',false);

        end

        function xReturn = allClientsAdded(obj)
        %allClientsAdded  
        %  return = allClientsAdded(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('allClientsAdded',obj.PortObj);
            xReturn = toMATLAB(ret,'int',false);

        end

        function xReturn = getClientIndex(obj)
        %getClientIndex  
        %  return = getClientIndex(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('getClientIndex',obj.PortObj);
            xReturn = toMATLAB(ret,'int',false);

        end

        function xReturn = setMasterOn(obj)
        %setMasterOn  
        %  return = setMasterOn(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('setMasterOn',obj.PortObj);
            xReturn = toMATLAB(ret,'int',false);

        end

        function xReturn = setMasterOff(obj)
        %setMasterOff  
        %  return = setMasterOff(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('setMasterOff',obj.PortObj);
            xReturn = toMATLAB(ret,'int',false);

        end

        function xReturn = getClientReply(obj,arg0)
        %getClientReply  
        %  return = getClientReply(obj,arg0)  
        %    Inputs:
        %      obj - MPIService object
        %      arg0 - numeric scalar (XML int)
        %    Output:
        %      return - string
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            if nargin < 2, error(message('MATLAB:webservices:TooFewArgs', 'arg0')), end
            if isempty(arg0)
                error(message('MATLAB:webservices:EmptyArg', 'arg0'))
            end
            ret = matlab.internal.callJava('getClientReply',obj.PortObj,fromMATLAB({'getClientReply','arg0'}, arg0,'int',false,false));
            xReturn = toMATLAB(ret,'string',false);

        end

        function xReturn = readMasterItr(obj)
        %readMasterItr  
        %  return = readMasterItr(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('readMasterItr',obj.PortObj);
            xReturn = toMATLAB(ret,'int',false);

        end

        function xReturn = addClient(obj)
        %addClient  
        %  return = addClient(obj)  
        %    Inputs:
        %      obj - MPIService object
        %    Output:
        %      return - numeric scalar (XML int)
        %
        % See also MPIService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('addClient',obj.PortObj);
            xReturn = toMATLAB(ret,'int',false);

        end

        function display(obj)
            disp(obj)
        end
    end

    % These are static convenience methods for creating objects
    % that need to be passed in as parameters to service methods 
    % or other convenience methods, to avoid having to invoke the
    % constructors in the package wsdl.mpiclient.  
    methods (Static)

    end
end

